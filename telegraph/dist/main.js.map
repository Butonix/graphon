{"version":3,"sources":["webpack://Telegraph/webpack/bootstrap","webpack://Telegraph/./src/modules/state.js","webpack://Telegraph/./src/utils/dom.js","webpack://Telegraph/./src/utils/event.js","webpack://Telegraph/./src/utils/debounce.js","webpack://Telegraph/./src/utils/numbers.js","webpack://Telegraph/./src/modules/path.js","webpack://Telegraph/./src/utils/log.js","webpack://Telegraph/./src/modules/graph.js","webpack://Telegraph/./src/modules/minimap.js","webpack://Telegraph/./src/modules/tooltip.js","webpack://Telegraph/./src/modules/pointer.js","webpack://Telegraph/./src/modules/chart.js","webpack://Telegraph/./src/modules/legend.js","webpack://Telegraph/./src/telegraph.js"],"names":[],"mappings":";;AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACe;AACf;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,SAAS;AACvB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA,sCAAsC;AACtC;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA,mDAAmD;AACnD;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc,OAAO;AACrB;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,C;;AC9GA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,gBAAgB;AAC3B;AACA,YAAY;AACZ;AACO,8DAA8D;AACrE;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACO;AACP;AACA;;AAEA;AACA;AACA;AACO;AACP;AACA,C;;AC1CA;AACA;AACA,WAAW,sBAAsB;AACjC;AACO;AACP;AACA;AACA;;AAEA;AACA,C;;ACVA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,WAAW,QAAQ;AACnB,YAAY;AACZ;AACe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,E;;ACpBO;AACP;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA,OAAO;AACP;AACA,OAAO;AACP;AACA;AACA,GAAG;AACH;AACA,GAAG;AACH;AACA;AACA,C;;ACnBoC;;AAEpC;AACA;AACA;AACe,MAAM,SAAI;AACzB,eAAe,+CAA+C;AAC9D;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB,IAAQ;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA,0BAA0B,UAAU,GAAG,UAAU;AACjD;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA,2BAA2B,mBAAmB,GAAG,UAAU;AAC3D;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB;AACA;AACA,2BAA2B,UAAU,GAAG,UAAU;AAClD;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,eAAe,IAAQ;AACvB;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA,0CAA0C,OAAO,OAAO,OAAO,IAAI,WAAW;AAC9E;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA,oFAAoF,QAAQ;AAC5F,KAAK;AACL,4DAA4D,QAAQ;AACpE;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA,oFAAoF,OAAO;AAC3F,KAAK;AACL,4DAA4D,OAAO;AACnE;;;AAGA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;;AAEA;AACA,wCAAwC,SAAI;AAC5C;;AAEA;AACA,+BAA+B,SAAI;AACnC;AACA,C;;AC1MA;;;AAGe;AACf;AACA;;AAEA;;AAEA;AACA,mBAAmB,IAAI,GAAG,iBAAiB;AAC3C,IAAI;;AAEJ;AACA,C;;ACdoC;AACQ;AAClB;;AAEQ;;;AAGlC;AACA;AACA;AACe,MAAM,WAAK;AAC1B;AACA,aAAa,UAAU;AACvB;AACA,wBAAwB,gBAAgB;AACxC;AACA;AACA,cAAc;AACd;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;;AAEA;AACA;AACA,cAAc,OAAO;AACrB;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA,KAAK;AACL;;;AAGA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,OAAO;AACpB,cAAc;AACd;AACA,gBAAgB,cAAc,KAAK;AACnC,kBAAkB,IAAQ;AAC1B,mBAAmB,IAAQ;AAC3B,mBAAmB,IAAQ;;AAE3B,uCAAuC,WAAK;AAC5C,uCAAuC,WAAK;AAC5C;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,SAAI;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;;AAEA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA,6CAA6C,2BAA2B,SAAS,QAAQ;AACzF;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA,6CAA6C,QAAQ;AACrD;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA,6CAA6C,eAAe;AAC5D;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,C;;ACpQuC;AACI;AACC;AACb;AACG;;;AAGlC;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAM,eAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA,qBAAqB,WAAK;AAC1B;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA,yBAAyB,IAAQ,QAAQ,eAAO;AAChD,0BAA0B,IAAQ,QAAQ,eAAO;AACjD,2BAA2B,IAAQ,QAAQ,eAAO;AAClD,gCAAgC,IAAQ,QAAQ,eAAO;AACvD,iCAAiC,IAAQ,QAAQ,eAAO;;AAExD;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA,IAAI,GAAG,EAAE,WAAW;AACpB;AACA;AACA;;AAEA;;AAEA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,sBAAsB;AACnC;AACA;AACA,WAAW,OAAO;;AAElB;;AAEA,mDAAmD,eAAO,oBAAoB;AAC9E,oDAAoD,eAAO,qBAAqB;;AAEhF;AACA,sBAAsB,QAAc;;AAEpC;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA,aAAa,WAAW;AACxB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,aAAa,WAAW;AACxB;AACA;AACA,gBAAgB,QAAc;;AAE9B;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA,aAAa,sBAAsB;AACnC,aAAa,OAAO;AACpB;AACA;AACA,gBAAgB,QAAc;AAC9B;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA,KAAK;AACL;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,C;;ACrduC;AACK;;AAE7B,MAAM,eAAO;AAC5B;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,IAAQ,QAAQ,eAAO;AAChD,uBAAuB,IAAQ,QAAQ,eAAO;AAC9C,wBAAwB,IAAQ,QAAQ,eAAO;;AAE/C;AACA;;AAEA;AACA;;AAEA;AACA,qCAAqC,eAAO;AAC5C;;AAEA;AACA,wCAAwC,eAAO;AAC/C;;AAEA;AACA;AACA;;AAEA;AACA;AACA,KAAK;AACL;AACA,KAAK;AACL;AACA;;AAEA,uCAAuC,2BAA2B;AAClE;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc,4BAA4B,GAAG;AAC7C;AACA;AACA;;AAEA,sBAAsB,YAAY;AAClC,mBAAmB,IAAQ,QAAQ,eAAO;AAC1C;AACA;;;AAGA,6BAA6B,QAAgB,QAAQ,MAAM,MAAM;AACjE;;AAEA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,C;;AC5FoC;;AAEpC;AACA;AACA;AACe,MAAM,eAAO;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,yBAAyB,IAAQ,QAAQ,eAAO;AAChD;AACA;;AAEA;AACA,qCAAqC,eAAO;AAC5C;;AAEA;AACA,wCAAwC,eAAO;AAC/C;;AAEA;AACA;AACA,uCAAuC,OAAO;AAC9C;;AAEA;AACA;AACA,cAAc,4BAA4B,GAAG;AAC7C;AACA;AACA;AACA,wBAAwB,KAAK;AAC7B,qBAAqB,IAAQ,QAAQ,eAAO;;AAE5C;AACA;AACA;AACA,OAAO;AACP;;AAEA;AACA,cAAc;AACd;AACA,WAAW,MAAM;;AAEjB;;AAEA,sBAAsB,YAAY;AAClC;;AAEA,4CAA4C,WAAW;AACvD,KAAK;;AAEL;AACA,C;;AC1EuC;AACR;AACC;AACA;AACW;;AAET;AACU;;AAE5C;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAM,WAAK;AAC1B;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA,eAAe,MAAM;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uBAAuB,eAAO;AAC9B,uBAAuB,eAAO;AAC9B,qBAAqB,WAAK;AAC1B;AACA,KAAK;;AAEL;AACA;AACA;;;;AAIA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA,oCAAoC;AACpC;;;;;;;AAOA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA,IAAI,GAAG,EAAE,sBAAsB;AAC/B;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA,yBAAyB,IAAQ,QAAQ,WAAK;AAC9C,0BAA0B,IAAQ,QAAQ,WAAK;AAC/C;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;;;AAIA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,aAAa,QAAQ;AACrB;AACA;AACA;AACA,wBAAwB,IAAQ,QAAQ,WAAK;AAC7C;AACA,MAAM,YAAgB;AACtB;;;;AAIA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,2BAA2B,WAAK;AAChC,OAAO;AACP;;AAEA;;AAEA,mBAAmB,iBAAiB;AACpC;AACA;;AAEA;AACA;AACA,OAAO;AACP,eAAe,IAAQ,QAAQ,WAAK;AACpC;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,4BAA4B,WAAK;AACjC;AACA,yBAAyB,QAAgB;AACzC;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA,IAAI,GAAG;AACP;AACA;AACA;AACA,KAAK;;;AAGL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP,gFAAgF,gCAAgC;AAChH;;;AAGA;AACA;;;;AAIA;AACA;AACA;;AAEA;AACA,mBAAmB,IAAQ;AAC3B;AACA;AACA;AACA,KAAK;;AAEL,2CAA2C,gCAAgC;AAC3E;AACA;AACA;AACA;AACA;;;;AAIA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,qGAAqG,iCAAiC,gEAAgE,iCAAiC;;AAEvO;AACA;;AAEA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,SAAS;AACtB;AACA;AACA,wBAAwB,IAAQ;;AAEhC;;AAEA,IAAI,WAAe;AACnB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,iBAAiB;AACvE;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;;AAEA,IAAI,GAAG,EAAE,QAAQ;;AAEjB;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB,cAAc;AACd;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;;AAEL;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA,aAAa,sBAAsB;AACnC;AACA;AACA,YAAY,QAAc;AAC1B;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;AACA;AACA,C;;ACllBuC;;AAExB,MAAM,aAAM;AAC3B;AACA,aAAa,UAAU;AACvB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,cAAc;AACd;AACA;AACA,yBAAyB,IAAQ,QAAQ,aAAM;;AAE/C;AACA;AACA;AACA;AACA,cAAc;AACd,KAAK;;AAEL,yBAAyB,YAAY;AACrC,iBAAiB,IAAQ,SAAS,aAAM,WAAW,aAAM;AACzD,mBAAmB,IAAQ,SAAS,aAAM;;AAE1C;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,OAAO;;AAEP;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA,aAAa,OAAO;AACpB;AACA;AACA;AACA;;AAEA,wCAAwC,aAAM;;AAE9C,0DAA0D,aAAM,cAAc;;AAE9E;AACA;AACA;AACA,8CAA8C,aAAM;AACpD,qDAAqD,gCAAgC;AACrF,KAAK;AACL;AACA;AACA;AACA;AACA;;;ACjFA;AAAoC;AACO;AACJ;AACE;;AAEzC;AACA,aAAa,OAAO;AACpB,cAAc,MAAM;AACpB;AACA;AACA;AACA,eAAe,WAAW;AAC1B;AACA;AACA;AACA,eAAe,wBAAwB;AACvC,eAAe,wBAAwB;AACvC;;AAEe,MAAM,mBAAS;AAC9B;AACA;AACA,aAAa,OAAO;AACpB,aAAa,UAAU;AACvB;AACA,eAAe,oBAAoB;AACnC;;AAEA;AACA;AACA;AACA,qBAAqB,KAAK;;AAE1B;AACA;AACA;AACA,uBAAuB,eAAO;;AAE9B;AACA;AACA;AACA,qBAAqB,WAAK;;AAE1B;AACA;AACA;AACA,sBAAsB,aAAM;;AAE5B;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe;AACf;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iCAAiC,mBAAS;AAC1C;AACA,C","file":"main.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * This class stores the sate of application\n * @todo add cache to all getters\n */\nexport default class State {\n  /**\n   * @param {ChartData} chartsData - input data\n   */\n  constructor(chartsData){\n    this.columns = chartsData.columns;\n    this.colors = chartsData.colors;\n    this.names = chartsData.names;\n    this.types = chartsData.types;\n\n    /**\n     * Cache\n     */\n    this._dates = this.columns[0].slice(1);\n  }\n\n  /**\n   * Column with dates is 0-index column, so shift it\n   * First element in arrays is column name (\"x\") so slice it\n   * @return {number[]} - array of dates in milliseconds\n   */\n  get dates(){\n    return this._dates;\n  }\n\n  /**\n   * Return available line names\n   * @return {string[]} - array of graph names\n   */\n  get linesAvailable(){\n    return Object.keys(this.names);\n  }\n\n  /**\n   * Returns numbers of days at the input data\n   * @return {number}\n   */\n  get daysCount(){\n    return this.columns[0].length - 1; // -1 because the first element is column type (\"x\")\n  }\n\n  /**\n   * Returns values of line by line name\n   * @param {string} lineName - \"y0\", \"y1\" etc\n   * @return {number[]}\n   */\n  getLinePoints(lineName){\n    return this.getColumnByName(lineName).slice(1); // slice 0-element because it is a column name\n  }\n\n  /**\n   * Return column by name\n   * @param {string} name - \"y0\", \"y1\" etc\n   * @return {array}\n   */\n  getColumnByName(name){\n    return this.columns[this.columns.findIndex(column => column[0] === name)];\n  }\n\n  /**\n   * Return N points from passed position\n   * @param {string} lineName - \"y0\", \"y1\", ...etc\n   * @param {number} from - start position\n   * @param {number} count - how many items requested\n   * @return {number[]}\n   */\n  getPointsSlice(lineName, from, count){\n    return this.getLinePoints(lineName).slice(from, from + count);\n  }\n\n  /**\n   * Returns color of line by line name\n   * @param {string} lineName - \"y0\", \"y1\" etc\n   * @return {string} - hex color like \"#333333\"\n   */\n  getLineColor(lineName){\n    return this.colors[lineName];\n  }\n\n  /**\n   * Return maximum value from all charts\n   * @return {number}\n   */\n  get max(){\n    const maxPerLines = this.linesAvailable.map( name => {\n      return Math.max(...this.getLinePoints(name));\n    });\n\n    return Math.max(...maxPerLines);\n  }\n\n  /**\n   * Array of available colors\n   * @return {string[]}\n   */\n  get colorsList(){\n    return Object.entries(this.colors).map(([name, value]) => value);\n  }\n\n  /**\n   * Array of available chart names\n   * @return {string[]}\n   */\n  get namesList(){\n    return Object.entries(this.names).map(([name, value]) => value);\n  }\n}","/**\n * Create HTML element\n * @param {string} tagName - HTML element tag name\n * @param {string[]|string} classNames - array of CSS classes\n * @param attributes - any attributes\n * @return {HTMLElement}\n */\nexport function make(tagName, classNames = undefined, attributes = {}) {\n  const svgNamespace = 'http://www.w3.org/2000/svg';\n  const svgElements = ['svg', 'path', 'rect', 'circle', 'text', 'g'];\n  const isSvg = svgElements.includes(tagName);\n  const el = !isSvg ? document.createElement(tagName) : document.createElementNS(svgNamespace, tagName);\n\n  if (Array.isArray(classNames) && classNames.length) {\n    el.classList.add(...classNames);\n  } else if (classNames) {\n    el.className = classNames;\n  }\n\n  if (attributes && Object.keys(attributes).length) {\n    for (let attrName in attributes) {\n      if (attributes.hasOwnProperty(attrName)) {\n        el.setAttribute(attrName, attributes[attrName]);\n      }\n    }\n  }\n\n  return el;\n}\n\n/**\n * Inserts one element after another\n */\nexport function insertAfter(target, element) {\n  target.parentNode.insertBefore(element, target.nextSibling);\n}\n\n/**\n * Insert one element before another\n */\nexport function insertBefore(target, element) {\n  target.parentNode.insertBefore(element, target);\n}","/**\n * Return pageX for passed Event\n * @param {MouseEvent|TouchEvent} event\n */\nexport function getPageX(event) {\n  if (event.touches){\n    return event.touches[0].pageX;\n  }\n\n  return event.pageX;\n}","/**\n * Invoke a function with debounce\n * @param {function} func - callback\n * @param {number} wait - how many second should be awaited before calling a callback\n * @param {boolean} immediate - pass true to call immediately\n * @return {Function}\n */\nexport default function debounce(func, wait, immediate) {\n  var timeout;\n  return function() {\n    var context = this, args = arguments;\n    var later = function() {\n      timeout = null;\n      if (!immediate) func.apply(context, args);\n    };\n    var callNow = immediate && !timeout;\n    clearTimeout(timeout);\n    timeout = setTimeout(later, wait);\n    if (callNow) func.apply(context, args);\n  };\n};","export function beautify(number) {\n  if (number < 1000) {\n    return number\n  } else if (number < 10000){\n      let thousands = Math.floor(number / 1000);\n      let left = number - thousands * 1000;\n\n      if (left > 100){\n        return thousands + ' ' + left;\n      } else if (left > 10) {\n        return thousands + ' 0' + left;\n      } else {\n        return thousands + ' 00' + left;\n      }\n  } else if (number < 1000000) {\n      return Math.floor(number / 1000) + 'k';\n  } else {\n    return Math.floor(number / 1000000) + 'M';\n  }\n}","import * as Dom from \"../utils/dom\";\n\n/**\n * Helper for creating an SVG path\n */\nexport default class Path {\n  constructor({color, svg, max, stroke, stepX, opacity = 1, g}){\n    this.svg = svg;\n    this.group = g;\n    this.canvasHeight = parseInt(this.svg.style.height, 10);\n    this.kY = max !== 0 ? this.canvasHeight / max : 1;\n    this.stepX = stepX;\n    this.prevX = 0;\n\n    this.path = Dom.make('path', null, {\n      'stroke-width' : stroke,\n      stroke : color,\n      fill : 'transparent',\n      'stroke-linecap' : 'round',\n      'stroke-linejoin' : 'round',\n      'vector-effect': 'non-scaling-stroke',\n      opacity\n    });\n\n    this.pathData = '';\n\n    /**\n     * Cache for CSS transform matrix\n     * @type {{scaleX: number, scaleY: number, translateX: number}}\n     */\n    this.matrix = {\n      scaleX: 1,\n      scaleY: 1,\n      translateX: 0\n    };\n\n    /**\n     * Debounce for transition removing\n     * @type {null}\n     */\n    this.debounce = null;\n  }\n\n  /**\n   * CSS classes map\n   * @return {{graphHidden: string}}\n   */\n  static get CSS(){\n    return {\n      graphHidden: 'tg-graph--hidden',\n    }\n  }\n\n  /**\n   * Compute Y value with scaling\n   */\n  y(val){\n    return Math.round(this.canvasHeight - val * this.kY);\n  }\n\n  /**\n   * Compute X value with scaling\n   */\n  x(val){\n    return val;\n  }\n\n  /**\n   * Go to passed coords\n   * @param {number} x\n   * @param {number} y\n   */\n  moveTo(x, y){\n    this.pathData += `M ${this.x(x)} ${this.y(y)}`;\n  }\n\n  /**\n   * Continue line to the next value\n   * @param {number} y\n   */\n  stepTo(y, skipStep){\n    if (!skipStep){\n      this.prevX = this.prevX + this.stepX;\n    }\n    this.pathData += ` L ${this.x(this.prevX)} ${this.y(y)}`;\n  }\n\n  /**\n   * Create a new line with x and y\n   * @param {number} x\n   * @param {number} y\n   */\n  lineTo(x, y){\n    this.pathData += ` L ${this.x(x)} ${this.y(y)}`;\n  }\n\n  /**\n   * Append a line\n   */\n  render(withAnimate = false){\n    this.path.setAttribute('d', this.pathData);\n    this.group.appendChild(this.path);\n\n    if (withAnimate){\n      this.animate();\n    }\n  }\n\n  /**\n   * Drop text to passed point\n   * @param value\n   */\n  dropText(value, skipStepX = false){\n    let text = Dom.make('text', null, {\n      x: !skipStepX ? this.prevX + this.stepX: this.prevX,\n      y: this.y(value),\n      fill: '#cccccc',\n      textAnchor: 'left',\n      'dominant-baseline': 'use-script'\n    })\n\n    text.appendChild(document.createTextNode(value));\n    text.style.fontSize = 13 + 'px';\n\n    this.svg.appendChild(text);\n  }\n\n  animate(){\n    const speed = 2000;\n    const length = this.path.getTotalLength();\n\n    // Clear any previous transition\n    this.path.style.transition = this.path.style.WebkitTransition = 'none';\n\n    // Set up the starting position\n    this.path.style.strokeDasharray = length + ' ' + length;\n    this.path.style.strokeDashoffset = length;\n\n    // Trigger a Layout so styles are re-calculated\n    // A browser picks up the starting position before animating\n    this.path.getBoundingClientRect();\n\n    // Define our transition\n    this.path.style.transition = this.path.style.WebkitTransition = 'stroke-dashoffset ' + speed + 'ms' + ' ease-in';\n\n    // Go.\n    this.path.style.strokeDashoffset = '0';\n\n    setTimeout(() => {\n      this.path.style.removeProperty('transition');\n      this.path.style.removeProperty('stroke-dasharray');\n      this.path.style.removeProperty('stroke-dashoffset');\n    }, speed)\n  };\n\n  setMatrix(scaleX, scaleY, translateX){\n    this.path.style.transform = `matrix(${scaleX},0,0,${scaleY}, ${translateX},0)`;\n    this.matrix = {\n      scaleX, scaleY, translateX\n    }\n  }\n\n  scaleX(scaling){\n    let oldTransform = this.path.style.transform;\n\n    if (oldTransform.includes('scaleX')){\n      this.path.style.transform = oldTransform.replace(/(scaleX\\(\\S+\\))/, `scaleX(${scaling})`)\n    } else {\n      this.path.style.transform = oldTransform + ` scaleX(${scaling})`;\n    }\n  }\n\n  scaleY(scaleY){\n    // this.matrix.scaleY = scaleY;\n    this.path.style.transition = 'transform 250ms ease, opacity 150ms ease';\n    // this.setMatrix(this.matrix.scaleX, scaleY, this.matrix.translateX);\n\n    let oldTransform = this.path.style.transform;\n\n    if (oldTransform.includes('scaleY')){\n      this.path.style.transform = oldTransform.replace(/(scaleY\\(\\S+\\))/, `scaleY(${scaleY})`)\n    } else {\n      this.path.style.transform = oldTransform + ` scaleY(${scaleY})`;\n    }\n\n\n    if (this.debounce){\n      clearTimeout(this.debounce);\n    }\n\n    this.debounce = setTimeout(() => {\n      this.path.style.transition = 'opacity 150ms ease';\n    }, 270)\n  }\n\n  get isHidden(){\n    return this.path.classList.contains(Path.CSS.graphHidden);\n  }\n\n  toggleVisibility(){\n    this.path.classList.toggle(Path.CSS.graphHidden);\n  }\n}","let prevValues = {};\n\n\nexport default function log(obj){\n  let el = document.getElementById('log');\n   Object.assign(prevValues, obj);\n\n   let content = '';\n\n   Object.entries(prevValues).forEach(([key, value]) => {\n     content += `${key} ${value.toFixed(3)}   `\n   })\n\n  el.innerHTML = content;\n}","import * as Dom from '../utils/dom';\nimport * as Numbers from '../utils/numbers';\nimport Path from './path';\n\nimport log from '../utils/log.js';\n\n\n/**\n * Working with svg paths for charts\n */\nexport default class Graph {\n  /**\n   * @param {Telegraph} modules\n   */\n  constructor(modules, {stroke, animate}){\n    /**\n     * Width of date label is used for default stepX value in 1:1 scale\n     * @type {number}\n     */\n    const dateLabelWidth = 45;\n\n    this.modules = modules;\n    this.state = modules.state;\n    this.animate = animate || false;\n    /**\n     * @todo move to this.nodes\n     */\n    this.canvas = undefined;\n\n    /**\n     * Transformations on OY\n     */\n    this.oyGroup = undefined;\n\n    /**\n     * Transformations on OX\n     */\n    this.oxGroup = undefined;\n\n    this.stepX = dateLabelWidth;\n    this.stepY = 10;\n    this.strokeWidth = stroke;\n    this.initialWidth = undefined;\n    this.maxPoint = this.state.max * 1.2; // 20% for padding top\n    this.oyScaling = 1;\n\n    /**\n     * List of drawn lines\n     * @type {object} name -> Path\n     */\n    this.paths = {};\n\n    /**\n     * Cache for canvas width and height values\n     * @type {number}\n     * @private\n     */\n    this._width = 0;\n    this._height = 0;\n  }\n\n  static get CSS(){\n    return {\n      oxGroup: 'ox-group',\n      oyGroup: 'oy-group',\n    }\n  }\n\n  /**\n   * Return Graph's paths as array\n   * @return {Path[]}\n   */\n  get pathsList(){\n    return Object.entries(this.paths).map(([name, path]) => {\n      return path;\n    });\n  }\n\n\n  /**\n   * Prepares the SVG element\n   * @param {number} [width] - strict canvas width\n   * @param {number} [height] - strict canvas height\n   * @return {SVGElement}\n   */\n  renderCanvas({width, height} = {}){\n    this.canvas = Dom.make('svg');\n    this.oxGroup = Dom.make('g');\n    this.oyGroup = Dom.make('g');\n\n    this.oxGroup.setAttribute('class', Graph.CSS.oxGroup);\n    this.oyGroup.setAttribute('class', Graph.CSS.oyGroup);\n    this.oyGroup.setAttribute('vector-effect', 'non-scaling-stroke');\n    this.oxGroup.setAttribute('vector-effect', 'non-scaling-stroke');\n\n    if (!width){\n      this.computeInitialWidth();\n    } else {\n      this.width = this.initialWidth = width;\n    }\n\n    if (height){\n      this.height = height;\n    }\n\n    this.computeSteps();\n\n    this.oyGroup.appendChild(this.oxGroup);\n    this.canvas.appendChild(this.oyGroup);\n\n    return this.canvas;\n  }\n\n  /**\n   * Compute and set initial canvas width\n   */\n  computeInitialWidth(){\n    this.initialWidth = (this.state.daysCount - 1) * this.stepX;\n    this.width = this.initialWidth;\n  }\n\n  /**\n   * Return total (big) chart width\n   * @return {number}\n   */\n  get width(){\n    return this._width;\n  }\n\n  /**\n   * Set canvas width\n   * @param {number} val\n   */\n  set width(val){\n    this._width = val;\n    this.canvas.style.width = val + 'px';\n  }\n\n  /**\n   * Return chart height\n   * @return {number}\n   */\n  get height(){\n    return this._height;\n  }\n\n  /**\n   * Set canvas height\n   * @param {number} val\n   */\n  set height(val){\n    this._height = val;\n    this.canvas.style.height = val + 'px';\n  }\n\n  /**\n   * Calculates stepX by canvas width and total points count\n   */\n  computeSteps(){\n    this.stepX = this.width / (this.state.daysCount - 1);\n\n    /**\n     * All lines maximum value\n     */\n    const max = this.state.max;\n    const stepsAvailable = [5, 10, 25, 50, 100, 1000, 500, 10000, 5000, 100000, 1000000, 10000000];\n    let newStepYIndex = stepsAvailable.reverse().findIndex( step => max > step ),\n    newStepY = stepsAvailable[newStepYIndex];\n\n    if (max / newStepY < 3 && newStepYIndex < stepsAvailable.length - 1){\n      newStepY = stepsAvailable[newStepYIndex + 1];\n    }\n\n    this.stepY = newStepY;\n  }\n\n\n  /**\n   * Renders a line by name\n   * @param {string} name - line name (\"y0\", \"y1\" etc)\n   */\n  renderLine(name){\n    /**\n     * Array of chart Y values\n     */\n    const values = this.state.getLinePoints(name);\n\n    /**\n     * Color of drawing line\n     */\n    const color = this.state.getLineColor(name);\n\n    /**\n     * Point to from which we will start drawing\n     */\n    const leftPoint = values[0];\n\n    /**\n     * Create a Path instance\n     */\n    const path = new Path({\n      svg: this.canvas,\n      g: this.oxGroup,\n      color,\n      max: this.maxPoint,\n      stroke: this.strokeWidth,\n      stepX: this.stepX,\n    });\n\n    path.moveTo(0, leftPoint);\n\n    values.forEach( (column, index )=> {\n      if (index === 0){\n        // path.dropText(column, true);\n        path.stepTo(column, true);\n      } else {\n        // path.dropText(column);\n        path.stepTo(column);\n      }\n\n    });\n\n    path.render(this.animate);\n\n    this.paths[name] = path;\n  }\n\n  scroll(newLeft){\n    this.oxGroup.style.transform = `matrix(${this.modules.chart.scaling},0,0,1,${newLeft},0)`;\n  }\n\n  /**\n   * Scale left legend\n   * @param {number} scaling\n   */\n  scaleLines(scaling){\n    this.oxGroup.style.transform = `scaleX(${scaling})`;\n    this.width = this.initialWidth * scaling;\n  }\n\n  get step(){\n    return this.stepX;\n  }\n\n  /**\n   * Scale path on OY\n   * @param {number} newMax - new max value\n   */\n  scaleToMaxPoint(newMax){\n    this.oyScaling = this.maxPoint / newMax * 0.8;\n    this.oyGroup.style.transform = `scaleY(${this.oyScaling})`;\n  }\n\n  checkPathVisibility(name){\n    return !this.paths[name].isHidden;\n  }\n\n  togglePathVisibility(name){\n    this.paths[name].toggleVisibility();\n  }\n}","import * as Dom from '../utils/dom.js';\nimport * as Event from '../utils/event.js';\nimport debounce from '../utils/debounce.js';\nimport Graph from './graph.js';\nimport log from '../utils/log.js';\n\n\n/**\n * Module for working with Chart Mini map\n * - Render UI\n * - Render graphs\n * - Scaling\n * - Scrolling\n */\nexport default class Minimap {\n  /**\n   * Telegraph\n   * @param modules\n   */\n  constructor(modules){\n    this.modules = modules;\n    /**\n     * @param {State} state\n     */\n    this.state = modules.state;\n    this.nodes = {\n      wrapper: undefined,\n      canvas: undefined,\n\n      leftZone: undefined,\n      leftZoneScaler: undefined,\n      rightZone: undefined,\n      rightZoneScaler: undefined,\n    };\n\n    this.wrapperWidthCached = undefined;\n    this.viewportWidth = 100;\n    this.viewportWidthInitial = 100;\n    this.viewportOffsetLeft = 0;\n\n    /**\n     * Remember width on touch start\n     */\n    this.viewportWidthBeforeDrag = undefined;\n\n    /**\n     * Clicked pageX\n     */\n    this.moveStartX = undefined;\n\n    /**\n     * Clicked layerX\n     */\n    this.wrapperLeftCoord = undefined;\n\n    /**\n     * Indicator that viewport zone is dragged\n     */\n    this.viewportPressed = false;\n\n    /**\n     * Indicator that left scaler zone is dragged\n     */\n    this.leftScalerClicked = false;\n\n    /**\n     * Indicator that right scaler zone is dragged\n     */\n    this.rightScalerClicked = false;\n\n    /**\n     * Scale debounce\n     */\n    this.scaleDebounce = undefined;\n\n    /**\n     * Cache for zones size\n     */\n    this.leftZoneWidth = 0;\n    this.rightZoneWidth = 0;\n\n    this.prevX = 0;\n\n    this.graph = new Graph(this.modules, {\n      stroke: 1,\n      animate: true\n    });\n  }\n\n  static get CSS(){\n    return {\n      wrapper: 'tg-minimap',\n      leftZone: 'tg-minimap__left',\n      leftZoneScaler: 'tg-minimap__left-scaler',\n      rightZone: 'tg-minimap__right',\n      rightZoneScaler: 'tg-minimap__right-scaler',\n    }\n  }\n\n  /**\n   * Prepares minimap UI\n   * @return {Element}\n   */\n  renderUi(){\n    this.nodes.wrapper = Dom.make('div', Minimap.CSS.wrapper);\n    this.nodes.leftZone = Dom.make('div', Minimap.CSS.leftZone);\n    this.nodes.rightZone = Dom.make('div', Minimap.CSS.rightZone);\n    this.nodes.leftZoneScaler = Dom.make('div', Minimap.CSS.leftZoneScaler);\n    this.nodes.rightZoneScaler = Dom.make('div', Minimap.CSS.rightZoneScaler);\n\n    this.nodes.leftZone.appendChild(this.nodes.leftZoneScaler);\n    this.nodes.rightZone.appendChild(this.nodes.rightZoneScaler);\n\n    this.nodes.wrapper.appendChild(this.nodes.leftZone);\n    this.nodes.wrapper.appendChild(this.nodes.rightZone);\n\n    this.bindEvents();\n\n    return this.nodes.wrapper;\n  }\n\n  /**\n   * Fill UI with chart and set initial Position\n   */\n  renderMap(){\n    this.nodes.canvas = this.graph.renderCanvas({\n      width: this.nodes.wrapper.offsetWidth,\n      height: this.nodes.wrapper.offsetHeight\n    });\n\n    this.state.linesAvailable.forEach( name => {\n      this.graph.renderLine(name);\n    });\n\n    this.setInitialPosition();\n\n    this.nodes.wrapper.appendChild(this.nodes.canvas);\n  }\n\n  /**\n   * Return width of a mini map\n   * @return {number}\n   */\n  get wrapperWidth(){\n    return this.wrapperWidthCached || this.nodes.wrapper.offsetWidth;\n  }\n\n  /**\n   * Compute current minimap width\n   * @return {number}\n   */\n  get width(){\n    return this.wrapperWidth - this.leftZoneWidth - this.rightZoneWidth;\n  }\n\n  /**\n   * Left zone width setter\n   */\n  set leftWidth(val){\n    this.leftZoneWidth = val;\n    this.nodes.leftZone.style.width = val + 'px';\n  }\n\n  /**\n   * Right zone width setter\n   */\n  set rightWidth(val){\n    this.rightZoneWidth = val;\n    this.nodes.rightZone.style.width = val + 'px';\n  }\n\n  /**\n   * Set new with to the minimap's viewport\n   * @param {number} value\n   */\n  set width(value){\n    const scrollDistance = this.modules.chart.scrollDistance;\n\n    this.leftWidth = scrollDistance;\n    this.rightWidth = this.wrapperWidth - scrollDistance - value;\n    this.viewportWidth = value;\n  }\n\n  /**\n   * Initial width and offset\n   */\n  setInitialPosition(){\n    let rect = this.nodes.wrapper.getBoundingClientRect();\n    this.wrapperWidthCached = rect.width;\n    this.wrapperLeftCoord = rect.left;\n\n    this.width = this.modules.chart.minimalMapWidth;\n\n    this.viewportWidthInitial = this.viewportWidthBeforeDrag = this.width;\n    this.viewportOffsetLeft = this.wrapperWidth - this.viewportWidthInitial;\n    this.moveViewport(this.viewportOffsetLeft);\n    this.syncScrollWithChart(this.viewportOffsetLeft);\n    this.modules.chart.fitToMax();\n  }\n\n  /**\n   * Current scroll value\n   * @return {number}\n   */\n  get scrolledValue(){\n    return this.leftZoneWidth;\n  }\n\n  /**\n   * Value of left zone width minimum\n   */\n  get leftZoneMinimumWidth(){\n    return 0;\n  }\n\n  /**\n   * Value of left zone width maximum\n   */\n  get leftZoneMaximumWidth(){\n    return this.wrapperWidth - this.viewportWidthInitial - this.rightZoneWidth;\n  }\n\n  /**\n   * Value of right zone width minimum\n   */\n  get rightZoneMinimumWidth(){\n    return this.viewportWidthInitial;\n  }\n\n  /**\n   * Value of right zone width maximum\n   */\n  get rightZoneMaximumWidth(){\n    return this.wrapperWidth - this.viewportWidthInitial - this.scrolledValue;\n  }\n\n  /**\n   * Moves viewport from left for passed value\n   * @param {string} offsetLeft\n   */\n  moveViewport(offsetLeft){\n    log({offsetLeft})\n    const width = this.width;\n    const maxLeft = this.wrapperWidth - width;\n    const minLeft = this.leftZoneMinimumWidth;\n\n    let newLeft = this.viewportOffsetLeft + offsetLeft;\n\n    if (newLeft < minLeft){\n      newLeft = minLeft;\n    } else if (newLeft > maxLeft){\n      newLeft = maxLeft;\n    }\n    this.leftWidth = newLeft;\n    this.rightWidth = this.wrapperWidth - this.viewportWidthBeforeDrag - newLeft;\n  }\n\n  bindEvents(){\n    this.nodes.wrapper.addEventListener('mousedown', (event) => {\n      this.viewportMousedown(event);\n    });\n\n    document.body.addEventListener('mousemove', (event) => {\n      this.viewportMousemove(event);\n    });\n\n    document.body.addEventListener('mouseup', (event) => {\n      this.viewportMouseup(event);\n    });\n\n    this.nodes.wrapper.addEventListener('touchstart', (event) => {\n      this.viewportMousedown(event);\n    });\n\n    this.nodes.wrapper.addEventListener('touchmove', (event) => {\n      this.viewportMousemove(event);\n    });\n\n    this.nodes.wrapper.addEventListener('touchend', (event) => {\n      this.viewportMouseup(event);\n    });\n  }\n\n  /**\n   * Viewport under finger\n   * @param {MouseEvent|TouchEvent} event\n   */\n  viewportMousedown(event){\n    const {target} = event;\n\n    event.preventDefault();\n\n    const leftScalerClicked = !!target.closest(`.${Minimap.CSS.leftZoneScaler}`);\n    const rightScalerClicked = !!target.closest(`.${Minimap.CSS.rightZoneScaler}`);\n\n    this.viewportWidthBeforeDrag = this.width;\n    this.moveStartX = Event.getPageX(event);\n\n    if (leftScalerClicked || rightScalerClicked){\n      this.leftScalerClicked = leftScalerClicked;\n      this.rightScalerClicked = rightScalerClicked;\n      this.viewportPressed = false;\n      return;\n    }\n\n\n    this.viewportPressed = true;\n  }\n\n  /**\n   * Viewport dragged\n   * @param {MouseEvent} event\n   */\n  viewportMousemove(event){\n    if (this.viewportPressed){\n      this.viewportDragged(event);\n    } else if (this.leftScalerClicked){\n      this.scalerDragged(event, 'left');\n    } else if (this.rightScalerClicked){\n      this.scalerDragged(event, 'right');\n    }\n  }\n\n  viewportMouseup(){\n    if (this.viewportPressed){\n      this.finishSliding();\n    } else if (this.leftScalerClicked){\n      this.finishLeftScaling();\n    } else if (this.rightScalerClicked){\n      this.finishRightScaling();\n    }\n  }\n\n  finishSliding(){\n    this.viewportPressed = false;\n    this.viewportOffsetLeft = this.scrolledValue;\n\n\n    // let start = null;\n    //\n    // // console.log('direction', direction);\n    //\n    // let step = (timestamp) => {\n    //   if (!start) start = timestamp;\n    //   var progress = timestamp - start;\n    //   let forTo = Math.min(progress / this.prevX, 500);\n    //\n    //   console.log('forTo', this.prevX, progress);\n    //\n    //   // console.log('progress', progress);\n    //   this.moveViewport(forTo * 5);\n    //   // element.style.transform = 'translateX(' + Math.min(progress / 10, 200) + 'px)';\n    //   if (progress < 100) {\n    //     window.requestAnimationFrame(step);\n    //   }\n    // }\n\n    // window.requestAnimationFrame(step);\n  }\n\n  finishLeftScaling(){\n    this.leftScalerClicked = false;\n    this.viewportOffsetLeft = this.scrolledValue;\n  }\n\n  finishRightScaling(){\n    this.rightScalerClicked = false;\n    this.viewportOffsetLeft = this.scrolledValue;\n  }\n\n  /**\n   * @param {MouseEvent} event\n   */\n  viewportDragged(event){\n    let delta = Event.getPageX(event) - this.moveStartX;\n\n    // let direction = this.prevX < delta ? 'right' : 'left';\n\n    // this.prevX = delta + 0;\n    this.moveViewport(delta);\n    this.syncScrollWithChart();\n\n    this.modules.chart.fitToMax(true);\n  }\n\n  /**\n   * Sync scroll between minimap and chart\n   * @param {number} [newScroll] - pass scroll if you have\n   */\n  syncScrollWithChart(newScroll = null, fromScale = false, scaling = 1){\n    /**\n     * How many percents of mini-map is scrolled\n     */\n    let scrolledValue = !isNaN(parseInt(newScroll)) ? newScroll : this.scrolledValue;\n    const minimapScrolledPortion = scrolledValue / this.wrapperWidth;\n    const chartScroll = minimapScrolledPortion * this.modules.chart.width;\n\n    this.modules.chart.scroll(chartScroll * scaling, fromScale);\n  }\n\n  /**\n   * Viewport side-scaler is moved\n   * @param {MouseEvent|TouchEvent} event\n   * @param {string} side — 'left' or 'right'\n   */\n  scalerDragged(event, side){\n    let pageX = Event.getPageX(event);\n    let delta = pageX - this.moveStartX;\n\n    let direction = this.prevX < pageX ? 'right' : 'left';\n\n    if (!delta || this.prevX === pageX){\n      return;\n    }\n\n    this.prevX = pageX + 0;\n\n    let newScalerWidth;\n\n    if (side === 'left'){\n      delta = delta * -1;\n      newScalerWidth = this.viewportOffsetLeft - delta;\n\n      if (newScalerWidth > this.leftZoneMaximumWidth) {\n        return;\n      }\n\n      this.leftWidth = newScalerWidth;\n\n    } else {\n      newScalerWidth = this.wrapperWidth - this.viewportOffsetLeft - (this.viewportWidthBeforeDrag + delta);\n\n      if (newScalerWidth > this.rightZoneMaximumWidth){\n        return;\n      }\n\n      this.rightWidth = newScalerWidth;\n    }\n\n    const newViewportWidth = side === 'left' ?\n      this.wrapperWidth - newScalerWidth - this.rightZoneWidth :\n      this.wrapperWidth - this.leftZoneWidth - newScalerWidth;\n\n    const scaling = this.viewportWidthInitial / newViewportWidth * this.modules.chart.initialScale;\n\n    this.modules.chart.scale(scaling, direction);\n    this.syncScrollWithChart(side === 'left' ? newScalerWidth : this.leftZoneWidth, true);\n    this.modules.chart.fitToMax();\n  }\n\n  /**\n   * Toggle path visibility\n   * @param {string} name - graph name\n   */\n  togglePath(name){\n    this.graph.togglePathVisibility(name);\n    this.fitToMax();\n  }\n\n  /**\n   * Upscale or downscale graph to fit visible points\n   */\n  fitToMax(){\n    const maxVisiblePoint = Math.max(...this.state.linesAvailable.filter(line => this.graph.checkPathVisibility(line)).map(line => {\n      return Math.max(...this.state.getLinePoints(line));\n    }));\n\n    this.graph.scaleToMaxPoint(maxVisiblePoint);\n  }\n}","import * as Dom from '../utils/dom.js';\nimport * as Numbers from '../utils/numbers';\n\nexport default class Tooltip {\n  /**\n   * @param {Telegraph} modules\n   */\n  constructor(modules){\n    this.modules = modules;\n    this.nodes = {\n      wrapper:  undefined,\n      title: undefined,\n      values: undefined\n    }\n  }\n\n  /**\n   * CSS map\n   * @return {{wrapper: string, title: string, values: string, value: string}}\n   */\n  static get CSS(){\n    return {\n      wrapper: 'tg-tooltip',\n      showed: 'tg-tooltip--showed',\n      title: 'tg-tooltip__title',\n      values: 'tg-tooltip__values',\n      value: 'tg-tooltip__values-item',\n    }\n  }\n\n  render(){\n    this.nodes.wrapper = Dom.make('div', Tooltip.CSS.wrapper);\n    this.nodes.title = Dom.make('div', Tooltip.CSS.title);\n    this.nodes.values = Dom.make('div', Tooltip.CSS.values);\n\n    this.nodes.wrapper.appendChild(this.nodes.title);\n    this.nodes.wrapper.appendChild(this.nodes.values);\n\n    return this.nodes.wrapper;\n  }\n\n  show(){\n    this.nodes.wrapper.classList.add(Tooltip.CSS.showed);\n  }\n\n  hide(){\n    this.nodes.wrapper.classList.remove(Tooltip.CSS.showed);\n  }\n\n  move(lineLeftCoord){\n    let offsetLeft = -25;\n    const tooltipWidth = this.nodes.wrapper.offsetWidth;\n\n    if (lineLeftCoord > this.modules.chart.viewportWidth - tooltipWidth / 1.3){\n      offsetLeft = -1.3 * tooltipWidth;\n    } else if (lineLeftCoord > this.modules.chart.viewportWidth - tooltipWidth ){\n      offsetLeft = -0.8 * tooltipWidth;\n    } else if (lineLeftCoord < 45){\n      offsetLeft = 20;\n    }\n\n    this.nodes.wrapper.style.left = `${lineLeftCoord + offsetLeft}px`;\n  }\n\n  clear(){\n    this.nodes.title.textContent = '';\n    this.nodes.values.innerHTML = '';\n  }\n\n  /**\n   * Render values of current hovered points\n   * @param {{name: string, value: number}[]} values\n   */\n  set values(values){\n    this.clear();\n\n    values.forEach( ({name, value}) => {\n      const item = Dom.make('div', Tooltip.CSS.value);\n      const color = this.modules.state.colors[name];\n      const title = this.modules.state.names[name];\n\n\n      item.innerHTML = `<b>${Numbers.beautify(value)}</b>${title}`;\n      item.style.color = color;\n\n      this.nodes.values.appendChild(item);\n    })\n  }\n\n  set title(string){\n    this.nodes.title.innerHTML = string;\n  }\n}","import * as Dom from \"../utils/dom\";\n\n/**\n * Line with current values pointers\n */\nexport default class Pointer {\n  constructor(modules){\n    this.modules = modules;\n    this.nodes = {\n      wrapper: undefined,\n    }\n    this.pointers = [];\n  }\n\n  /**\n   * CSS map\n   * @return {{wrapper: string, showed: string, pointer: string}}\n   * @constructor\n   */\n  static get CSS(){\n    return {\n      wrapper: 'tg-pointer',\n      showed: 'tg-pointer--showed',\n      pointer: 'tg-pointer__pointer'\n    }\n  }\n\n  render(){\n    this.nodes.wrapper = Dom.make('div', Pointer.CSS.wrapper);\n    return this.nodes.wrapper;\n  }\n\n  show(){\n    this.nodes.wrapper.classList.add(Pointer.CSS.showed);\n  }\n\n  hide(){\n    this.nodes.wrapper.classList.remove(Pointer.CSS.showed);\n  }\n\n  move(leftPx){\n    this.show();\n    this.nodes.wrapper.style.left = `${leftPx}px`;\n  }\n\n  /**\n   * Show circles\n   * @param {{name: string, value: number}[]} values\n   */\n  showValues(values){\n    if (!this.pointers.length){\n      values.forEach( ({name}) => {\n        const item = Dom.make('div', Pointer.CSS.pointer);\n\n        item.style.borderColor = this.modules.state.colors[name];\n        this.nodes.wrapper.appendChild(item);\n        this.pointers.push(item);\n      })\n    }\n\n    /**\n     * @type {Graph}\n     */\n    const {graph} = this.modules.chart;\n\n    let kY = graph.height / graph.maxPoint * graph.oyScaling;\n\n    values.forEach( ({name, value}, index) => {\n      const item = this.pointers[index];\n\n      item.style.transform = `translateY(-${value * kY}px)`;\n    })\n\n  }\n}","import * as Dom from '../utils/dom.js';\nimport Graph from './graph.js';\nimport Tooltip from \"./tooltip\";\nimport Pointer from \"./pointer\";\nimport * as Event from '../utils/event.js';\n\nimport log from '../utils/log.js';\nimport * as Numbers from \"../utils/numbers\";\n\n/**\n * Module for working with main Chart zone\n * - Render UI\n * - Render axes\n * - Render graphs\n * - Toggle lines visibility\n */\nexport default class Chart {\n  /**\n   * @param {Telegraph} modules\n   */\n  constructor(modules){\n    this.modules = modules;\n    /**\n     * @param {State} state\n     */\n    this.state = modules.state;\n    this.nodes = {\n      wrapper: undefined,\n      viewport: undefined,\n      canvas: undefined,\n      cursorLine: undefined,\n      grid: undefined,\n      gridLines: [],\n      legend: undefined,\n      legendDates: [],\n    };\n\n    this.tooltip = new Tooltip(this.modules);\n    this.pointer = new Pointer(this.modules);\n    this.graph = new Graph(this.modules, {\n      stroke: 2\n    });\n\n    this.wrapperLeftCoord = undefined;\n    this.scaling = 1;\n    this.scrollValue = 0;\n\n\n\n    this.lenendDateWidth = 38;\n\n    /**\n     * Set will be store indexes of visible dates\n     * @type {Set<number>}\n     */\n    this.onscreenDates = new Set();\n    this.onscreenDatesElements = {}; // origin index -> element mapping\n    this._datesPerScreen = undefined;\n\n\n\n\n\n\n    /**\n     * Any properties can be cached here\n     * @type {{}}\n     */\n    this.cache = {};\n\n    this._initialScale = undefined;\n    this._initialStep = undefined;\n  }\n\n  get initialStep(){\n    if (!this._initialStep){\n      this._initialStep = this.width / (this.state.daysCount - 1);\n    }\n    return this._initialStep;\n  }\n\n  get minimalMapWidth(){\n    return 2 * this.initialStep;\n  }\n\n  get initialScale(){\n    return this._initialScale;\n  }\n\n  /**\n   * Get initial scaling corresponded with minimal minimap width\n   */\n  calculateInitialValues(){\n    /**\n     * Width of viewport when chart is not scaled\n     * @type {number}\n     */\n    const chartToViewportRatio = this.viewportWidth / this.width;\n    const originalWidth = this.viewportWidth * chartToViewportRatio;\n    const scaledViewportRatio = this.minimalMapWidth / originalWidth;\n\n    const originalScalingChange = this.scaling / scaledViewportRatio;\n\n    this.initialScale = originalScalingChange;\n\n    log({scaling: this.scaling});\n  }\n\n  set initialScale(value){\n    this._initialScale = value;\n    this.scale(value);\n  }\n\n  /**\n   * CSS map\n   * @return {{wrapper: string, viewport: string, cursorLine: string}}\n   */\n  static get CSS(){\n    return {\n      wrapper: 'tg-chart',\n      viewport: 'tg-chart__viewport',\n      grid: 'tg-grid',\n      gridSection: 'tg-grid__section',\n      gridSectionHidden: 'tg-grid__section--hidden',\n      dateHidden: 'tg-legend__date--hidden',\n    }\n  }\n\n  get stepX(){\n    return this.graph.stepX;\n  }\n\n  get stepY(){\n    return this.graph.stepY;\n  }\n\n  get maxPoint(){\n    return this.graph.maxPoint;\n  }\n\n  get height(){\n    return this.graph.height;\n  }\n\n  /**\n   * Total chart width\n   * @return {number}\n   */\n  get width(){\n    return this.graph.width;\n  }\n\n  /**\n   * Return current scroll distance\n   * @return {number}\n   */\n  get scrollDistance() {\n    return this.scrollValue * this.scaling;\n  }\n\n  /**\n   * Visible viewport width\n   * @return {number}\n   */\n  get viewportWidth(){\n    if (this.cache.viewportWidth){\n      return this.cache.viewportWidth;\n    }\n\n    this.cache.viewportWidth = this.nodes.wrapper.offsetWidth;\n    return this.cache.viewportWidth;\n  }\n\n  /**\n   * Visible viewport height\n   * @return {number}\n   */\n  get viewportHeight(){\n    if (this.cache.viewportHeight){\n      return this.cache.viewportHeight;\n    }\n\n    this.cache.viewportHeight = this.nodes.wrapper.offsetHeight;\n    return this.cache.viewportHeight;\n  }\n\n  /**\n   * Prepare UI\n   * @return {Element}\n   */\n  renderUi(){\n    this.nodes.wrapper = Dom.make('div', Chart.CSS.wrapper);\n    this.nodes.viewport = Dom.make('div', Chart.CSS.viewport);\n    this.nodes.cursorLine = this.pointer.render();\n\n    this.nodes.wrapper.appendChild(this.nodes.viewport);\n    this.nodes.wrapper.appendChild(this.nodes.cursorLine);\n\n    this.nodes.wrapper.appendChild(this.tooltip.render());\n\n    this.bindEvents();\n\n    return this.nodes.wrapper;\n  }\n\n  /**\n   * Renders charts\n   */\n  renderCharts(){\n    this.calculateWrapperCoords();\n\n    /**\n     * @todo pass height through the initial settings\n     */\n    this.nodes.canvas = this.graph.renderCanvas({\n      height: 350\n    });\n    this.nodes.viewport.appendChild(this.nodes.canvas);\n\n    /**\n     * Get initial scale\n     */\n    this.calculateInitialValues();\n\n\n\n    this.state.linesAvailable.forEach( name => {\n      this.graph.renderLine(name);\n    });\n\n    this.renderGrid();\n    this.renderLegend();\n  }\n\n  /**\n   * Render or updates a grid\n   * @param {number} forceMax - new max value for updating\n   * @param {boolean} isUpdating - true for updating\n   */\n  renderGrid(forceMax, isUpdating = false){\n    if (!this.nodes.grid) {\n      this.nodes.grid = Dom.make('div', Chart.CSS.grid);\n      this.nodes.gridLines = [];\n      Dom.insertBefore(this.nodes.canvas, this.nodes.grid);\n    }\n\n\n\n    let stepY = this.stepY;\n    const height = this.height;\n    const max = forceMax || this.maxPoint;\n    const kY = height / max;\n\n    let linesCount = height / (stepY * kY) >> 0;\n\n    if (linesCount === 0){\n      stepY = stepY / 3;\n      linesCount = height / (stepY * kY) >> 0;\n    }\n\n    if (linesCount === 1){\n      stepY = stepY / 2;\n      linesCount = height / (stepY * kY) >> 0;\n    }\n\n    if (linesCount === 2){\n      stepY = stepY / 2;\n      linesCount = height / (stepY * kY) >> 0;\n    }\n\n    if (linesCount > 5){\n      stepY = stepY * 2;\n      linesCount = height / (stepY * kY) >> 0;\n    }\n\n    if (this.nodes.gridLines.length){\n      this.nodes.gridLines.forEach( line => {\n        line.classList.add(Chart.CSS.gridSectionHidden);\n      })\n    }\n\n    // Drawing horizontal lines\n\n    for (let j = 0; j <= linesCount; j++) {\n      let y = j * stepY;\n      let line;\n\n      if (this.nodes.gridLines.length && this.nodes.gridLines[j]){\n        line = this.nodes.gridLines[j];\n      } else {\n        line = Dom.make('div', Chart.CSS.gridSection);\n        this.nodes.grid.appendChild(line);\n        this.nodes.gridLines.push(line);\n      }\n\n      if (j === 0){\n        line.classList.add('no-animation');\n      }\n\n      /**\n       * To prevent overflow last line\n       */\n      if (y * kY > 325){\n        return;\n      }\n\n      line.classList.remove(Chart.CSS.gridSectionHidden);\n      line.style.bottom = y * kY + 'px';\n      line.textContent = Numbers.beautify(Math.round(y));\n    }\n  }\n\n\n  pushDate(date, originIndex){\n    let centering = 'translateX(-50%)';\n\n    if (originIndex === 0){\n      centering = '';\n    }\n\n\n    let pointsOnScreen = this.rightPointIndex - this.leftPointIndex;\n    let showEvery = Math.ceil(pointsOnScreen / this.datesPerScreen);\n\n    log({\n      'points on screen': pointsOnScreen,\n      'vlezet': this.datesPerScreen,\n      showEvery\n    });\n\n\n    /**\n     * If point already showed, move it or hide\n     */\n    if (this.onscreenDates.has(originIndex)){\n      if (originIndex % showEvery !== 0){\n        this.onscreenDatesElements[originIndex].remove();\n        this.onscreenDates.delete(originIndex );\n        delete this.onscreenDatesElements[originIndex];\n      } else {\n        this.onscreenDatesElements[originIndex].style.transform = `translateX(${ originIndex * this.stepScaled }px)` + centering;\n      }\n\n\n      return\n    }\n\n\n\n    if (originIndex % showEvery !== 0){\n      return;\n    }\n\n    const dt = new Date(date);\n    const dateEl = Dom.make('time');\n    dateEl.textContent = dt.toLocaleDateString('en-US', {\n      day: 'numeric',\n      month: 'short'\n    });\n\n    dateEl.style.transform = `translateX(${ originIndex * this.stepScaled }px)` + centering;\n    this.nodes.legend.appendChild(dateEl);\n    this.nodes.legendDates.push(dateEl);\n    this.onscreenDates.add(originIndex);\n    this.onscreenDatesElements[originIndex] = dateEl;\n  }\n\n\n\n  /**\n   * Left visible point\n   * @return {number}\n   */\n  get leftPointIndex(){\n    return parseInt(Math.floor(this.scrollValue * -1/ this.stepX / this.scaling));\n  }\n\n  /**\n   * Right visible point\n   * @return {number}\n   */\n  get rightPointIndex(){\n    let onscreen = Math.floor(this.viewportWidth / this.stepX / this.scaling);\n    return this.leftPointIndex + onscreen;\n  }\n\n  /**\n   * @todo add cache\n   */\n  get datesPerScreen(){\n    if (!this._datesPerScreen){\n      this._datesPerScreen = Math.floor(this.viewportWidth / (this.lenendDateWidth + 40));\n    }\n    return this._datesPerScreen;\n  }\n\n  get stepScaled(){\n    return this.stepX * this.scaling\n  }\n\n  addOnscreenDates(){\n    let datesOnScreen = this.state.dates.slice(this.leftPointIndex, this.rightPointIndex + 2);\n    let datesOnScreenIndexes = new Set();\n\n    // let leftDate = new Date(this.state.dates[this.leftPointIndex]);\n    // let rightDate = new Date(this.state.dates[this.leftPointIndex + this.rightPointIndex]);\n    // console.log('l %o (%o) r %o (%o)', this.leftPointIndex, leftDate.toLocaleDateString('en-US', { day: 'numeric', month: 'short' }), this.rightPointIndex, rightDate.toLocaleDateString('en-US', { day: 'numeric', month: 'short' }));\n\n    datesOnScreen.forEach((date, index) => {\n      const originIndex = this.leftPointIndex + index;\n\n      datesOnScreenIndexes.add(originIndex);\n      this.pushDate(date, originIndex);\n    });\n\n    this.onscreenDates.forEach((index) => {\n      if (!datesOnScreenIndexes.has(index)) {\n        this.onscreenDatesElements[index].remove();\n        this.onscreenDates.delete(index);\n        delete this.onscreenDatesElements[index];\n      }\n    });\n  }\n\n  /**\n   * Renders a legend with dates\n   * @param {number[]} dates\n   */\n  renderLegend(){\n    this.nodes.legend = Dom.make('footer');\n\n    this.addOnscreenDates();\n\n    Dom.insertAfter(this.nodes.canvas, this.nodes.legend);\n  }\n\n  /**\n   * Perform scroll\n   * @param position\n   */\n  scroll(position){\n    this.scrollValue = position * -1;\n    this.graph.scroll(this.scrollValue);\n    this.nodes.legend.style.transform = `translateX(${this.scrollValue}px)`;\n    this.addOnscreenDates();\n    this.tooltip.hide();\n    this.pointer.hide();\n  }\n\n  /**\n   * Perform scaling\n   * @param {number} scaling\n   */\n  scale(scaling, direction){\n    this.graph.scaleLines(scaling, direction);\n\n    log({scaling});\n\n    this.scaling = scaling;\n  }\n\n  /**\n   * Left visible point\n   * @return {number}\n   */\n  get leftPointIndex(){\n    return Math.round(this.scrollValue * -1/ this.graph.step / this.scaling);\n  }\n\n  /**\n   * Filter to skip hidden line\n   * @param {string} line - name of the graph\n   * @return {boolean}\n   */\n  notHiddenGraph(line){\n    return this.graph.checkPathVisibility(line);\n  }\n\n  /**\n   * Upscale or downscale graph to fit visible points\n   */\n  fitToMax(){\n    const stepX = this.graph.step;\n    const pointsVisible = Math.round(this.viewportWidth / stepX / this.scaling);\n    const maxVisiblePoint = Math.max(...this.state.linesAvailable.filter(line => this.notHiddenGraph(line)).map(line => {\n      let slice = this.state.getPointsSlice(line, this.leftPointIndex, pointsVisible);\n      return Math.max(...slice);\n    }));\n\n    this.graph.scaleToMaxPoint(maxVisiblePoint);\n\n    /**\n     * Rerender grid if it was rendered before\n     */\n    if (this.nodes.grid){\n      this.renderGrid(maxVisiblePoint * 1.2, true);\n    }\n  }\n\n  /**\n   * Store wrapper rectangle data\n   */\n  calculateWrapperCoords(){\n    let rect = this.nodes.wrapper.getBoundingClientRect();\n\n    this.wrapperLeftCoord = rect.left;\n  }\n\n  bindEvents(){\n    this.nodes.wrapper.addEventListener('mousemove', (event) => {\n      this.mouseMove(event);\n    });\n\n    this.nodes.wrapper.addEventListener('mouseleave', (event) => {\n      this.mouseLeave(event);\n    });\n\n    this.nodes.wrapper.addEventListener('touchmove', (event) => {\n      this.mouseMove(event);\n    });\n\n    this.nodes.wrapper.addEventListener('touchcancel', (event) => {\n      this.mouseLeave(event);\n    });\n  }\n\n  /**\n   * Shows line with Tooltip\n   * @param {MouseEvent|TouchEvent} event\n   */\n  mouseMove(event){\n    let x = Event.getPageX(event);\n    let viewportX = x - this.wrapperLeftCoord;\n\n    let stepXWithScale = this.graph.stepX * this.scaling;\n    let scrollOffset = this.scrollValue % stepXWithScale;\n    let pointIndex = Math.round(viewportX / this.graph.stepX / this.scaling);\n    let hoveredPointIndex = pointIndex + this.leftPointIndex;\n    // let firstStepOffset = this.graph.stepX - Math.abs(scrollOffset);\n\n    if (Math.abs(scrollOffset) > (stepXWithScale / 2) ){\n      pointIndex = pointIndex + 1;\n    }\n\n    let newLeft = pointIndex * stepXWithScale + scrollOffset;\n\n    // console.log('scroll offset %o | step %o (%o)| index %o | x %o | drawn at %o | first step offset %o | left index %o ', scrollOffset, this.graph.stepX, stepXWithScale, pointIndex, viewportX, newLeft, firstStepOffset, this.leftPointIndex);\n\n    this.tooltip.show();\n    this.pointer.move(newLeft);\n\n    const values = this.state.linesAvailable.filter(line => this.notHiddenGraph(line)).map( line => {\n      return {\n        name: line,\n        value: this.state.getLinePoints(line)[hoveredPointIndex]\n      }\n    });\n\n    /**\n     * Show circles\n     */\n    this.pointer.showValues(values);\n\n    const date = this.state.dates[hoveredPointIndex];\n\n    /**\n     * Skip bounding empty positions\n     */\n    if (!date){\n      return;\n    }\n\n    this.tooltip.values = values;\n    this.tooltip.move(newLeft);\n    this.tooltip.title = (new Date(date)).toLocaleDateString('en-US', {\n      day: 'numeric',\n      month: 'short',\n      weekday: 'short'\n    });\n  }\n\n  mouseLeave(){\n    this.tooltip.hide();\n    this.pointer.hide();\n  }\n\n  /**\n   * Toggle path visibility\n   * @param {string} name - graph name\n   */\n  togglePath(name){\n    this.graph.togglePathVisibility(name);\n    this.fitToMax();\n  }\n}","import * as Dom from '../utils/dom.js';\n\nexport default class Legend {\n  /**\n   * @param {Telegraph} modules\n   */\n  constructor(modules){\n    this.modules = modules;\n    this.nodes = {\n      wrapper: undefined,\n    };\n\n    this.buttons = {};\n  }\n\n  static get CSS(){\n    return {\n      wrapper: 'tg-legend',\n      item: 'tg-legend__item',\n      itemEnabled: 'tg-legend__item--enabled',\n      checkbox: 'tg-legend__checkbox',\n    }\n  }\n\n  /**\n   * Show graphs togglers\n   * @return {Element}\n   */\n  render(){\n    this.nodes.wrapper = Dom.make('div', Legend.CSS.wrapper);\n\n    /**\n     * Object with names -> array with names\n     */\n    const namesArray = Object.entries(this.modules.state.names).map(([name, title]) => {\n      return {name, title}\n    });\n\n    namesArray.forEach(({name, title}) => {\n      let item = Dom.make('div', [Legend.CSS.item, Legend.CSS.itemEnabled]),\n        checkbox = Dom.make('span', Legend.CSS.checkbox);\n\n      checkbox.style.borderColor = this.modules.state.colors[name];\n      checkbox.style.backgroundColor = this.modules.state.colors[name];\n\n      item.appendChild(checkbox);\n      item.appendChild(document.createTextNode(title));\n\n      this.buttons[name] = item;\n\n      item.addEventListener('click', () => {\n        this.itemClicked(name);\n      });\n\n      this.nodes.wrapper.appendChild(item);\n    });\n    return this.nodes.wrapper;\n  }\n\n  /**\n   * Click handler for togglers\n   * @param {string} name - graph name\n   */\n  itemClicked(name){\n    this.modules.chart.togglePath(name);\n    this.modules.minimap.togglePath(name);\n\n    this.buttons[name].classList.toggle(Legend.CSS.itemEnabled);\n\n    const checkbox = this.buttons[name].querySelector(`.${Legend.CSS.checkbox}`);\n\n    /**\n     * @todo add animation\n     */\n    if (this.buttons[name].classList.contains(Legend.CSS.itemEnabled)){\n      checkbox.style.boxShadow = `inset 0 0 0 10px ${this.modules.state.colors[name]}`;\n    } else {\n      checkbox.style.boxShadow = 'none';\n      checkbox.style.backgroundColor = 'transparent';\n    }\n  }\n}\n","import State from './modules/state';\nimport Minimap from './modules/minimap.js';\nimport Chart from './modules/chart.js';\nimport Legend from './modules/legend.js';\n\n/**\n * @typedef {object} ChartData\n * @property {array} columns – List of all data columns in the chart.\n *                             0 - position (\"x\", \"y0\", \"y1\")\n *                             1+ - values\n *                             \"x\" values are UNIX timestamps in milliseconds.\n * @property {{x, y0, y1}} types – Chart types for each of the columns.\n *                                 Supported values:\n *                                 \"line\" (line on the graph with linear interpolation),\n *                                 \"x\" (x axis values for each of the charts at the corresponding positions).\n * @property {{y0: string, y1: string}} colors – Color for each line in 6-hex-digit format (e.g. \"#AAAAAA\").\n * @property {{y0: string, y1: string}} names – Names for each line.\n */\n\nexport default class Telegraph {\n  /**\n   * Main entry constructor\n   * @param {string} holderId - where to append a Chart\n   * @param {ChartData} inputData - chart data\n   */\n  constructor({holderId, inputData}){\n    this.holder = document.getElementById(holderId);\n\n    /**\n     * Module that stores all main app state values\n     */\n    this.state = new State(inputData);\n\n    /**\n     * Module for mini map\n     */\n    this.minimap = new Minimap(this);\n\n    /**\n     * Working with main chart zone\n     */\n    this.chart = new Chart(this);\n\n    /**\n     * Working with legend items\n     */\n    this.legend = new Legend(this);\n\n    /**\n     * Create base UI elements\n     */\n    this.prepareUi();\n\n    /**\n     * Render chart and minimap\n     */\n    this.chart.renderCharts();\n    this.minimap.renderMap();\n  }\n\n  /**\n   * CSS classes map\n   * @return {{nightModeEnabled: string}}\n   */\n  static get CSS(){\n    return {\n      nightModeEnabled : 'tg--night-mode'\n    }\n  }\n\n  /**\n   * Create base app UI\n   */\n  prepareUi(){\n    this.holder.appendChild(this.chart.renderUi());\n    this.holder.appendChild(this.minimap.renderUi());\n    this.holder.appendChild(this.legend.render());\n  }\n\n  /**\n   * @public\n   * Toggles night mode\n   */\n  toggleNightMode(){\n    this.holder.classList.toggle(Telegraph.CSS.nightModeEnabled);\n  }\n}"],"sourceRoot":""}